using namespace metal;

enum class OpenSimplex2MetalNoise2Variant: int8_t {
    standard = 0,
    x = 1,
};

enum class OpenSimplex2MetalNoise3Variant: int8_t {
    xy = 0,
    xz = 1,
    fallback = 2,
};

enum class OpenSimplex2MetalNoise4Variant: int8_t {
    xyz = 0,
    xyz_xy = 1,
    xyz_xz = 2,
    xy_zw = 3,
    fallback = 4,
};

struct OpenSimplex2MetalParameters {
    int seed;
    OpenSimplex2MetalNoise2Variant noise2Variant;
    OpenSimplex2MetalNoise3Variant noise3Variant;
    OpenSimplex2MetalNoise4Variant noise4Variant;
};

constant static long const PRIME_X = 0x5205402B9270C86FL;
constant static long const PRIME_Y = 0x598CD327003817B5L;
constant static long const PRIME_Z = 0x5BCC226E9FA0BACBL;
constant static long const PRIME_W = 0x56CC5227E58F554BL;
constant static long const HASH_MULTIPLIER = 0x53A3F72DEEC546F5L;
constant static float const UNSKEW_2D = -0.21132486540518713;

int fastFloor(float x) {
    int xi = (int)x;
    return x < xi ? xi - 1 : xi;
}

int fastRound(float x) {
    return x < 0 ? (int)(x - 0.5) : (int)(x + 0.5);
}
constant static float const ROOT2OVER2 = 0.7071067811865476;
constant static float const SKEW_2D = 0.366025403784439;
constant static int const N_GRADS_2D_EXPONENT = 7;
constant static int const N_GRADS_2D = 128;
constant static float const NORMALIZER_2D = 0.010016341214;
constant static float const RSQUARED_2D = 0.5f;
constant static float GRADIENTS_2D[N_GRADS_2D * 2] = { 38.205909729004, 92.237228393555, 92.237228393555, 38.205909729004, 92.237228393555, -38.205909729004, 38.205909729004, -92.237228393555, -38.205909729004, -92.237228393555, -92.237228393555, -38.205909729004, -92.237228393555, 38.205909729004, -38.205909729004, 92.237228393555, 13.031324386597, 98.982734680176, 60.776824951172, 79.205902099609, 79.205902099609, 60.776824951172, 98.982734680176, 13.031324386597, 98.982734680176, -13.031324386597, 79.205902099609, -60.776824951172, 60.776824951172, -79.205902099609, 13.031324386597, -98.982734680176, -13.031324386597, -98.982734680176, -60.776824951172, -79.205902099609, -79.205902099609, -60.776824951172, -98.982734680176, -13.031324386597, -98.982734680176, 13.031324386597, -79.205902099609, 60.776824951172, -60.776824951172, 79.205902099609, -13.031324386597, 98.982734680176, 38.205909729004, 92.237228393555, 92.237228393555, 38.205909729004, 92.237228393555, -38.205909729004, 38.205909729004, -92.237228393555, -38.205909729004, -92.237228393555, -92.237228393555, -38.205909729004, -92.237228393555, 38.205909729004, -38.205909729004, 92.237228393555, 13.031324386597, 98.982734680176, 60.776824951172, 79.205902099609, 79.205902099609, 60.776824951172, 98.982734680176, 13.031324386597, 98.982734680176, -13.031324386597, 79.205902099609, -60.776824951172, 60.776824951172, -79.205902099609, 13.031324386597, -98.982734680176, -13.031324386597, -98.982734680176, -60.776824951172, -79.205902099609, -79.205902099609, -60.776824951172, -98.982734680176, -13.031324386597, -98.982734680176, 13.031324386597, -79.205902099609, 60.776824951172, -60.776824951172, 79.205902099609, -13.031324386597, 98.982734680176, 38.205909729004, 92.237228393555, 92.237228393555, 38.205909729004, 92.237228393555, -38.205909729004, 38.205909729004, -92.237228393555, -38.205909729004, -92.237228393555, -92.237228393555, -38.205909729004, -92.237228393555, 38.205909729004, -38.205909729004, 92.237228393555, 13.031324386597, 98.982734680176, 60.776824951172, 79.205902099609, 79.205902099609, 60.776824951172, 98.982734680176, 13.031324386597, 98.982734680176, -13.031324386597, 79.205902099609, -60.776824951172, 60.776824951172, -79.205902099609, 13.031324386597, -98.982734680176, -13.031324386597, -98.982734680176, -60.776824951172, -79.205902099609, -79.205902099609, -60.776824951172, -98.982734680176, -13.031324386597, -98.982734680176, 13.031324386597, -79.205902099609, 60.776824951172, -60.776824951172, 79.205902099609, -13.031324386597, 98.982734680176, 38.205909729004, 92.237228393555, 92.237228393555, 38.205909729004, 92.237228393555, -38.205909729004, 38.205909729004, -92.237228393555, -38.205909729004, -92.237228393555, -92.237228393555, -38.205909729004, -92.237228393555, 38.205909729004, -38.205909729004, 92.237228393555, 13.031324386597, 98.982734680176, 60.776824951172, 79.205902099609, 79.205902099609, 60.776824951172, 98.982734680176, 13.031324386597, 98.982734680176, -13.031324386597, 79.205902099609, -60.776824951172, 60.776824951172, -79.205902099609, 13.031324386597, -98.982734680176, -13.031324386597, -98.982734680176, -60.776824951172, -79.205902099609, -79.205902099609, -60.776824951172, -98.982734680176, -13.031324386597, -98.982734680176, 13.031324386597, -79.205902099609, 60.776824951172, -60.776824951172, 79.205902099609, -13.031324386597, 98.982734680176, 38.205909729004, 92.237228393555, 92.237228393555, 38.205909729004, 92.237228393555, -38.205909729004, 38.205909729004, -92.237228393555, -38.205909729004, -92.237228393555, -92.237228393555, -38.205909729004, -92.237228393555, 38.205909729004, -38.205909729004, 92.237228393555, 13.031324386597, 98.982734680176, 60.776824951172, 79.205902099609, 79.205902099609, 60.776824951172, 98.982734680176, 13.031324386597, 98.982734680176, -13.031324386597, 79.205902099609, -60.776824951172, 60.776824951172, -79.205902099609, 13.031324386597, -98.982734680176, -13.031324386597, -98.982734680176, -60.776824951172, -79.205902099609, -79.205902099609, -60.776824951172, -98.982734680176, -13.031324386597, -98.982734680176, 13.031324386597, -79.205902099609, 60.776824951172, -60.776824951172, 79.205902099609, -13.031324386597, 98.982734680176, 38.205909729004, 92.237228393555, 92.237228393555, 38.205909729004, 92.237228393555, -38.205909729004, 38.205909729004, -92.237228393555, -38.205909729004, -92.237228393555, -92.237228393555, -38.205909729004, -92.237228393555, 38.205909729004, -38.205909729004, 92.237228393555 };

float grad(long seed, long xsvp, long ysvp, float dx, float dy) {
    long hash = seed ^ xsvp ^ ysvp;
    hash *= HASH_MULTIPLIER;
    hash ^= hash >> (64 - N_GRADS_2D_EXPONENT + 1);
    int gi = (int)hash & ((N_GRADS_2D - 1) << 1);
    return GRADIENTS_2D[gi | 0] * dx + GRADIENTS_2D[gi | 1] * dy;
}

float noise2_UnskewedBase(long seed, float xs, float ys) {
    // Get base points and offsets.
    int xsb = fastFloor(xs), ysb = fastFloor(ys);
    float xi = (float)(xs - xsb), yi = (float)(ys - ysb);

    // Prime pre-multiplication for hash.
    long xsbp = xsb * PRIME_X, ysbp = ysb * PRIME_Y;

    // Unskew.
    float t = (xi + yi) * (float)UNSKEW_2D;
    float dx0 = xi + t, dy0 = yi + t;

    // First vertex.
    float value = 0;
    float a0 = RSQUARED_2D - dx0 * dx0 - dy0 * dy0;
    if (a0 > 0) {
        value = (a0 * a0) * (a0 * a0) * grad(seed, xsbp, ysbp, dx0, dy0);
    }

    // Second vertex.
    float a1 = (float)(2 * (1 + 2 * UNSKEW_2D) * (1 / UNSKEW_2D + 2)) * t + ((float)(-2 * (1 + 2 * UNSKEW_2D) * (1 + 2 * UNSKEW_2D)) + a0);
    if (a1 > 0) {
        float dx1 = dx0 - (float)(1 + 2 * UNSKEW_2D);
        float dy1 = dy0 - (float)(1 + 2 * UNSKEW_2D);
        value += (a1 * a1) * (a1 * a1) * grad(seed, (xsbp + PRIME_X), (ysbp + PRIME_Y), dx1, dy1);
    }

    // Third vertex.
    if (dy0 > dx0) {
        float dx2 = dx0 - (float)UNSKEW_2D;
        float dy2 = dy0 - (float)(UNSKEW_2D + 1);
        float a2 = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
        if (a2 > 0) {
            value += (a2 * a2) * (a2 * a2) * grad(seed, xsbp, (ysbp + PRIME_Y), dx2, dy2);
        }
    }
    else
    {
        float dx2 = dx0 - (float)(UNSKEW_2D + 1);
        float dy2 = dy0 - (float)UNSKEW_2D;
        float a2 = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
        if (a2 > 0) {
            value += (a2 * a2) * (a2 * a2) * grad(seed, (xsbp + PRIME_X), ysbp, dx2, dy2);
        }
    }

    return value;
}

float noise2(long seed, float x, float y) {
    // Get points for A2* lattice
    float s = SKEW_2D * (x + y);
    float xs = x + s, ys = y + s;

    return noise2_UnskewedBase(seed, xs, ys);
}

float noise2_ImproveX(long seed, float x, float y) {
    // Skew transform and rotation baked into one.
    float xx = x * ROOT2OVER2;
    float yy = y * (ROOT2OVER2 * (1 + 2 * SKEW_2D));

    return noise2_UnskewedBase(seed, yy + xx, yy - xx);
}
kernel void openSimplexNoise2(
                              constant OpenSimplex2MetalParameters &uniforms [[ buffer(0) ]],
                              constant const float2 * in                     [[ buffer(1) ]],
                              device float * out                             [[ buffer(2) ]],
                              uint2 thread_position_in_grid                  [[ thread_position_in_grid ]]
                              ) {
                                  int index = thread_position_in_grid.x;
                                  switch (uniforms.noise2Variant) {
                                      case OpenSimplex2MetalNoise2Variant::standard:
                                          out[index] = noise2(uniforms.seed, in[index].x, in[index].y);
                                          break;
                                      case OpenSimplex2MetalNoise2Variant::x:
                                          out[index] = noise2_ImproveX(uniforms.seed, in[index].x, in[index].y);
                                          break;
                                  }
                              }

constant static int const N_GRADS_3D_EXPONENT = 8;
constant static int const N_GRADS_3D = 256;
constant static float GRADIENTS_3D[N_GRADS_3D * 4] = { 27.914556503296, 27.914556503296, -12.547307014465, 0, 27.914556503296, 27.914556503296, 12.547307014465, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 0, -27.914556503296, 27.914556503296, -12.547307014465, 0, -27.914556503296, 27.914556503296, 12.547307014465, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, 0, -12.547307014465, -27.914556503296, -27.914556503296, 0, 12.547307014465, -27.914556503296, -27.914556503296, 0, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, -12.547307014465, -27.914556503296, 27.914556503296, 0, 12.547307014465, -27.914556503296, 27.914556503296, 0, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, -27.914556503296, -27.914556503296, -12.547307014465, 0, -27.914556503296, -27.914556503296, 12.547307014465, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, 0, -27.914556503296, -12.547307014465, -27.914556503296, 0, -27.914556503296, 12.547307014465, -27.914556503296, 0, -14.707343101501, 0, -38.724334716797, 0, -38.724334716797, 0, -14.707343101501, 0, -27.914556503296, -12.547307014465, 27.914556503296, 0, -27.914556503296, 12.547307014465, 27.914556503296, 0, -38.724334716797, 0, 14.707343101501, 0, -14.707343101501, 0, 38.724334716797, 0, -12.547307014465, 27.914556503296, -27.914556503296, 0, 12.547307014465, 27.914556503296, -27.914556503296, 0, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, -12.547307014465, 27.914556503296, 27.914556503296, 0, 12.547307014465, 27.914556503296, 27.914556503296, 0, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 27.914556503296, -27.914556503296, -12.547307014465, 0, 27.914556503296, -27.914556503296, 12.547307014465, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, 0, 27.914556503296, -12.547307014465, -27.914556503296, 0, 27.914556503296, 12.547307014465, -27.914556503296, 0, 38.724334716797, 0, -14.707343101501, 0, 14.707343101501, 0, -38.724334716797, 0, 27.914556503296, -12.547307014465, 27.914556503296, 0, 27.914556503296, 12.547307014465, 27.914556503296, 0, 14.707343101501, 0, 38.724334716797, 0, 38.724334716797, 0, 14.707343101501, 0, 27.914556503296, 27.914556503296, -12.547307014465, 0, 27.914556503296, 27.914556503296, 12.547307014465, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 0, -27.914556503296, 27.914556503296, -12.547307014465, 0, -27.914556503296, 27.914556503296, 12.547307014465, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, 0, -12.547307014465, -27.914556503296, -27.914556503296, 0, 12.547307014465, -27.914556503296, -27.914556503296, 0, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, -12.547307014465, -27.914556503296, 27.914556503296, 0, 12.547307014465, -27.914556503296, 27.914556503296, 0, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, -27.914556503296, -27.914556503296, -12.547307014465, 0, -27.914556503296, -27.914556503296, 12.547307014465, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, 0, -27.914556503296, -12.547307014465, -27.914556503296, 0, -27.914556503296, 12.547307014465, -27.914556503296, 0, -14.707343101501, 0, -38.724334716797, 0, -38.724334716797, 0, -14.707343101501, 0, -27.914556503296, -12.547307014465, 27.914556503296, 0, -27.914556503296, 12.547307014465, 27.914556503296, 0, -38.724334716797, 0, 14.707343101501, 0, -14.707343101501, 0, 38.724334716797, 0, -12.547307014465, 27.914556503296, -27.914556503296, 0, 12.547307014465, 27.914556503296, -27.914556503296, 0, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, -12.547307014465, 27.914556503296, 27.914556503296, 0, 12.547307014465, 27.914556503296, 27.914556503296, 0, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 27.914556503296, -27.914556503296, -12.547307014465, 0, 27.914556503296, -27.914556503296, 12.547307014465, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, 0, 27.914556503296, -12.547307014465, -27.914556503296, 0, 27.914556503296, 12.547307014465, -27.914556503296, 0, 38.724334716797, 0, -14.707343101501, 0, 14.707343101501, 0, -38.724334716797, 0, 27.914556503296, -12.547307014465, 27.914556503296, 0, 27.914556503296, 12.547307014465, 27.914556503296, 0, 14.707343101501, 0, 38.724334716797, 0, 38.724334716797, 0, 14.707343101501, 0, 27.914556503296, 27.914556503296, -12.547307014465, 0, 27.914556503296, 27.914556503296, 12.547307014465, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 0, -27.914556503296, 27.914556503296, -12.547307014465, 0, -27.914556503296, 27.914556503296, 12.547307014465, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, 0, -12.547307014465, -27.914556503296, -27.914556503296, 0, 12.547307014465, -27.914556503296, -27.914556503296, 0, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, -12.547307014465, -27.914556503296, 27.914556503296, 0, 12.547307014465, -27.914556503296, 27.914556503296, 0, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, -27.914556503296, -27.914556503296, -12.547307014465, 0, -27.914556503296, -27.914556503296, 12.547307014465, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, 0, -27.914556503296, -12.547307014465, -27.914556503296, 0, -27.914556503296, 12.547307014465, -27.914556503296, 0, -14.707343101501, 0, -38.724334716797, 0, -38.724334716797, 0, -14.707343101501, 0, -27.914556503296, -12.547307014465, 27.914556503296, 0, -27.914556503296, 12.547307014465, 27.914556503296, 0, -38.724334716797, 0, 14.707343101501, 0, -14.707343101501, 0, 38.724334716797, 0, -12.547307014465, 27.914556503296, -27.914556503296, 0, 12.547307014465, 27.914556503296, -27.914556503296, 0, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, -12.547307014465, 27.914556503296, 27.914556503296, 0, 12.547307014465, 27.914556503296, 27.914556503296, 0, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 27.914556503296, -27.914556503296, -12.547307014465, 0, 27.914556503296, -27.914556503296, 12.547307014465, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, 0, 27.914556503296, -12.547307014465, -27.914556503296, 0, 27.914556503296, 12.547307014465, -27.914556503296, 0, 38.724334716797, 0, -14.707343101501, 0, 14.707343101501, 0, -38.724334716797, 0, 27.914556503296, -12.547307014465, 27.914556503296, 0, 27.914556503296, 12.547307014465, 27.914556503296, 0, 14.707343101501, 0, 38.724334716797, 0, 38.724334716797, 0, 14.707343101501, 0, 27.914556503296, 27.914556503296, -12.547307014465, 0, 27.914556503296, 27.914556503296, 12.547307014465, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 0, -27.914556503296, 27.914556503296, -12.547307014465, 0, -27.914556503296, 27.914556503296, 12.547307014465, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, 0, -12.547307014465, -27.914556503296, -27.914556503296, 0, 12.547307014465, -27.914556503296, -27.914556503296, 0, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, -12.547307014465, -27.914556503296, 27.914556503296, 0, 12.547307014465, -27.914556503296, 27.914556503296, 0, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, -27.914556503296, -27.914556503296, -12.547307014465, 0, -27.914556503296, -27.914556503296, 12.547307014465, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, 0, -27.914556503296, -12.547307014465, -27.914556503296, 0, -27.914556503296, 12.547307014465, -27.914556503296, 0, -14.707343101501, 0, -38.724334716797, 0, -38.724334716797, 0, -14.707343101501, 0, -27.914556503296, -12.547307014465, 27.914556503296, 0, -27.914556503296, 12.547307014465, 27.914556503296, 0, -38.724334716797, 0, 14.707343101501, 0, -14.707343101501, 0, 38.724334716797, 0, -12.547307014465, 27.914556503296, -27.914556503296, 0, 12.547307014465, 27.914556503296, -27.914556503296, 0, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, -12.547307014465, 27.914556503296, 27.914556503296, 0, 12.547307014465, 27.914556503296, 27.914556503296, 0, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 27.914556503296, -27.914556503296, -12.547307014465, 0, 27.914556503296, -27.914556503296, 12.547307014465, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, 0, 27.914556503296, -12.547307014465, -27.914556503296, 0, 27.914556503296, 12.547307014465, -27.914556503296, 0, 38.724334716797, 0, -14.707343101501, 0, 14.707343101501, 0, -38.724334716797, 0, 27.914556503296, -12.547307014465, 27.914556503296, 0, 27.914556503296, 12.547307014465, 27.914556503296, 0, 14.707343101501, 0, 38.724334716797, 0, 38.724334716797, 0, 14.707343101501, 0, 27.914556503296, 27.914556503296, -12.547307014465, 0, 27.914556503296, 27.914556503296, 12.547307014465, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 0, -27.914556503296, 27.914556503296, -12.547307014465, 0, -27.914556503296, 27.914556503296, 12.547307014465, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, 0, -12.547307014465, -27.914556503296, -27.914556503296, 0, 12.547307014465, -27.914556503296, -27.914556503296, 0, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, -12.547307014465, -27.914556503296, 27.914556503296, 0, 12.547307014465, -27.914556503296, 27.914556503296, 0, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, -27.914556503296, -27.914556503296, -12.547307014465, 0, -27.914556503296, -27.914556503296, 12.547307014465, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, 0, -27.914556503296, -12.547307014465, -27.914556503296, 0, -27.914556503296, 12.547307014465, -27.914556503296, 0, -14.707343101501, 0, -38.724334716797, 0, -38.724334716797, 0, -14.707343101501, 0, -27.914556503296, -12.547307014465, 27.914556503296, 0, -27.914556503296, 12.547307014465, 27.914556503296, 0, -38.724334716797, 0, 14.707343101501, 0, -14.707343101501, 0, 38.724334716797, 0, -12.547307014465, 27.914556503296, -27.914556503296, 0, 12.547307014465, 27.914556503296, -27.914556503296, 0, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, -12.547307014465, 27.914556503296, 27.914556503296, 0, 12.547307014465, 27.914556503296, 27.914556503296, 0, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 27.914556503296, -27.914556503296, -12.547307014465, 0, 27.914556503296, -27.914556503296, 12.547307014465, 0, 14.707343101501, -38.724334716797, 0, 0, 38.724334716797, -14.707343101501, 0, 0, 27.914556503296, -12.547307014465, -27.914556503296, 0, 27.914556503296, 12.547307014465, -27.914556503296, 0, 38.724334716797, 0, -14.707343101501, 0, 14.707343101501, 0, -38.724334716797, 0, 27.914556503296, -12.547307014465, 27.914556503296, 0, 27.914556503296, 12.547307014465, 27.914556503296, 0, 14.707343101501, 0, 38.724334716797, 0, 38.724334716797, 0, 14.707343101501, 0, 27.914556503296, 27.914556503296, -12.547307014465, 0, 27.914556503296, 27.914556503296, 12.547307014465, 0, 38.724334716797, 14.707343101501, 0, 0, 14.707343101501, 38.724334716797, 0, 0, -27.914556503296, 27.914556503296, -12.547307014465, 0, -27.914556503296, 27.914556503296, 12.547307014465, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0, 0, -12.547307014465, -27.914556503296, -27.914556503296, 0, 12.547307014465, -27.914556503296, -27.914556503296, 0, 0, -38.724334716797, -14.707343101501, 0, 0, -14.707343101501, -38.724334716797, 0, -12.547307014465, -27.914556503296, 27.914556503296, 0, 12.547307014465, -27.914556503296, 27.914556503296, 0, 0, -14.707343101501, 38.724334716797, 0, 0, -38.724334716797, 14.707343101501, 0 };
constant static float const RSQUARED_3D = 0.6f;
constant static float const NORMALIZER_3D = 0.07969837668935331;
constant static long const SEED_FLIP_3D = -0x52D547B2E96ED629L;
constant static float const ROTATE_3D_ORTHOGONALIZER = UNSKEW_2D;
constant static float const ROOT3OVER3 = 0.577350269189626;
constant static float const FALLBACK_ROTATE_3D = 2.0 / 3.0;

float grad(long seed, long xrvp, long yrvp, long zrvp, float dx, float dy, float dz) {
    long hash = (seed ^ xrvp) ^ (yrvp ^ zrvp);
    hash *= HASH_MULTIPLIER;
    hash ^= hash >> (64 - N_GRADS_3D_EXPONENT + 2);
    int gi = (int)hash & ((N_GRADS_3D - 1) << 2);
    return GRADIENTS_3D[gi | 0] * dx + GRADIENTS_3D[gi | 1] * dy + GRADIENTS_3D[gi | 2] * dz;
}

float noise3_UnrotatedBase(long seed, float xr, float yr, float zr) {

    // Get base points and offsets.
    int xrb = fastRound(xr), yrb = fastRound(yr), zrb = fastRound(zr);
    float xri = (float)(xr - xrb), yri = (float)(yr - yrb), zri = (float)(zr - zrb);

    // -1 if positive, 1 if negative.
    int xNSign = (int)(-1.0f - xri) | 1, yNSign = (int)(-1.0f - yri) | 1, zNSign = (int)(-1.0f - zri) | 1;

    // Compute absolute values, using the above as a shortcut. This was faster in my tests for some reason.
    float ax0 = xNSign * -xri, ay0 = yNSign * -yri, az0 = zNSign * -zri;

    // Prime pre-multiplication for hash.
    long xrbp = xrb * PRIME_X, yrbp = yrb * PRIME_Y, zrbp = zrb * PRIME_Z;

    // Loop: Pick an edge on each lattice copy.
    float value = 0;
    float a = (RSQUARED_3D - xri * xri) - (yri * yri + zri * zri);
    for (int l = 0; ; l++) {

        // Closest point on cube.
        if (a > 0) {
            value += (a * a) * (a * a) * grad(seed, xrbp, yrbp, zrbp, xri, yri, zri);
        }

        // Second-closest point.
        if (ax0 >= ay0 && ax0 >= az0) {
            float b = a + ax0 + ax0;
            if (b > 1) {
                b -= 1;
                value += (b * b) * (b * b) * grad(seed, xrbp - xNSign * PRIME_X, yrbp, zrbp, xri + xNSign, yri, zri);
            }
        }
        else if (ay0 > ax0 && ay0 >= az0) {
            float b = a + ay0 + ay0;
            if (b > 1) {
                b -= 1;
                value += (b * b) * (b * b) * grad(seed, xrbp, yrbp - yNSign * PRIME_Y, zrbp, xri, yri + yNSign, zri);
            }
        }
        else
        {
            float b = a + az0 + az0;
            if (b > 1) {
                b -= 1;
                value += (b * b) * (b * b) * grad(seed, xrbp, yrbp, zrbp - zNSign * PRIME_Z, xri, yri, zri + zNSign);
            }
        }

        // Break from loop if we're done, skipping updates below.
        if (l == 1) break;

        // Update absolute value.
        ax0 = 0.5f - ax0;
        ay0 = 0.5f - ay0;
        az0 = 0.5f - az0;

        // Update relative coordinate.
        xri = xNSign * ax0;
        yri = yNSign * ay0;
        zri = zNSign * az0;

        // Update falloff.
        a += (0.75f - ax0) - (ay0 + az0);

        // Update prime for hash.
        xrbp += (xNSign >> 1) & PRIME_X;
        yrbp += (yNSign >> 1) & PRIME_Y;
        zrbp += (zNSign >> 1) & PRIME_Z;

        // Update the reverse sign indicators.
        xNSign = -xNSign;
        yNSign = -yNSign;
        zNSign = -zNSign;

        // And finally update the seed for the other lattice copy.
        seed ^= SEED_FLIP_3D;
    }

    return value;
}

float noise3_ImproveXY(long seed, float x, float y, float z) {
    float xy = x + y;
    float s2 = xy * ROTATE_3D_ORTHOGONALIZER;
    float zz = z * ROOT3OVER3;
    float xr = x + s2 + zz;
    float yr = y + s2 + zz;
    float zr = xy * -ROOT3OVER3 + zz;

    // Evaluate both lattices to form a BCC lattice.
    return noise3_UnrotatedBase(seed, xr, yr, zr);
}

float noise3_ImproveXZ(long seed, float x, float y, float z) {

    // Re-orient the cubic lattices without skewing, so Y points up the main lattice diagonal,
    // and the planes formed by XZ are moved far out of alignment with the cube faces.
    // Orthonormal rotation. Not a skew transform.
    float xz = x + z;
    float s2 = xz * ROTATE_3D_ORTHOGONALIZER;
    float yy = y * ROOT3OVER3;
    float xr = x + s2 + yy;
    float zr = z + s2 + yy;
    float yr = xz * -ROOT3OVER3 + yy;

    // Evaluate both lattices to form a BCC lattice.
    return noise3_UnrotatedBase(seed, xr, yr, zr);
}

float noise3_Fallback(long seed, float x, float y, float z) {
    float r = FALLBACK_ROTATE_3D * (x + y + z);
    float xr = r - x, yr = r - y, zr = r - z;

    // Evaluate both lattices to form a BCC lattice.
    return noise3_UnrotatedBase(seed, xr, yr, zr);
}

kernel void openSimplexNoise3(
                              constant OpenSimplex2MetalParameters &uniforms [[ buffer(0) ]],
                              constant const float3 * in                     [[ buffer(1) ]],
                              device float * out                             [[ buffer(2) ]],
                              uint2 thread_position_in_grid                  [[ thread_position_in_grid ]]
                              ) {
                                  int index = thread_position_in_grid.x;
                                  switch (uniforms.noise3Variant) {
                                      case OpenSimplex2MetalNoise3Variant::xy:
                                          out[index] = noise3_ImproveXY(uniforms.seed, in[index].x, in[index].y, in[index].z);
                                          break;
                                      case OpenSimplex2MetalNoise3Variant::xz:
                                          out[index] = noise3_ImproveXZ(uniforms.seed, in[index].x, in[index].y, in[index].z);
                                          break;
                                      case OpenSimplex2MetalNoise3Variant::fallback:
                                          out[index] = noise3_Fallback(uniforms.seed, in[index].x, in[index].y, in[index].z);
                                          break;
                                  }
                              }
constant static int const N_GRADS_4D_EXPONENT = 9;
constant static int const N_GRADS_4D = 512;
constant static float GRADIENTS_4D[N_GRADS_4D * 8] = { -30.62745475769, -14.722168922424, -14.722168922424, 26.33158493042, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 22.856151580811, -40.115985870361, 3.71012878418, 3.71012878418, 20.689500808716, -20.689500808716, -3.71012878418, -3.71012878418, 40.115985870361, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 34.102886199951, -26.33158493042, 14.722168922424, 14.722168922424, 30.62745475769, -30.62745475769, -14.722168922424, 26.33158493042, -14.722168922424, -34.102886199951, -18.197601318359, 22.856151580811, 6.950865268707, -34.102886199951, 6.950865268707, 22.856151580811, -18.197601318359, -40.115985870361, 3.71012878418, 20.689500808716, 3.71012878418, -20.689500808716, -3.71012878418, 40.115985870361, -3.71012878418, -22.856151580811, -6.950865268707, 34.102886199951, 18.197601318359, -22.856151580811, 18.197601318359, 34.102886199951, -6.950865268707, -26.33158493042, 14.722168922424, 30.62745475769, 14.722168922424, -30.62745475769, 26.33158493042, -14.722168922424, -14.722168922424, -34.102886199951, 22.856151580811, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -40.115985870361, 20.689500808716, 3.71012878418, 3.71012878418, -20.689500808716, 40.115985870361, -3.71012878418, -3.71012878418, -22.856151580811, 34.102886199951, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -26.33158493042, 30.62745475769, 14.722168922424, 14.722168922424, 26.33158493042, -30.62745475769, -14.722168922424, -14.722168922424, 22.856151580811, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 20.689500808716, -40.115985870361, 3.71012878418, 3.71012878418, 40.115985870361, -20.689500808716, -3.71012878418, -3.71012878418, 34.102886199951, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 30.62745475769, -26.33158493042, 14.722168922424, 14.722168922424, -34.232513427734, -17.253143310547, -17.253143310547, -17.253143310547, -35.542457580566, -19.637172698975, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, -19.637172698975, -39.017890930176, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -45.362899780273, -1.53678560257, -1.53678560257, -1.53678560257, -17.253143310547, -34.232513427734, -17.253143310547, -17.253143310547, -19.637172698975, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, -19.637172698975, -23.112604141235, -39.017890930176, 2.035861253738, 2.035861253738, 2.035861253738, -39.017890930176, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, -1.53678560257, -45.362899780273, -1.53678560257, -1.53678560257, -17.253143310547, -17.253143310547, -34.232513427734, -17.253143310547, -19.637172698975, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, -19.637172698975, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -39.017890930176, 2.035861253738, 2.035861253738, 2.035861253738, -39.017890930176, -23.112604141235, -1.53678560257, -1.53678560257, -45.362899780273, -1.53678560257, -17.253143310547, -17.253143310547, -17.253143310547, -34.232513427734, -19.637172698975, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, -19.637172698975, -35.542457580566, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -39.017890930176, -1.53678560257, -1.53678560257, -1.53678560257, -45.362899780273, -14.722168922424, -30.62745475769, -14.722168922424, 26.33158493042, -18.197601318359, -34.102886199951, 6.950865268707, 22.856151580811, 6.950865268707, -34.102886199951, -18.197601318359, 22.856151580811, 3.71012878418, -40.115985870361, 3.71012878418, 20.689500808716, -3.71012878418, -20.689500808716, -3.71012878418, 40.115985870361, -6.950865268707, -22.856151580811, 18.197601318359, 34.102886199951, 18.197601318359, -22.856151580811, -6.950865268707, 34.102886199951, 14.722168922424, -26.33158493042, 14.722168922424, 30.62745475769, -14.722168922424, -14.722168922424, -30.62745475769, 26.33158493042, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -34.102886199951, 22.856151580811, 3.71012878418, 3.71012878418, -40.115985870361, 20.689500808716, -3.71012878418, -3.71012878418, -20.689500808716, 40.115985870361, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -22.856151580811, 34.102886199951, 14.722168922424, 14.722168922424, -26.33158493042, 30.62745475769, -14.722168922424, -30.62745475769, 26.33158493042, -14.722168922424, -18.197601318359, -34.102886199951, 22.856151580811, 6.950865268707, 6.950865268707, -34.102886199951, 22.856151580811, -18.197601318359, 3.71012878418, -40.115985870361, 20.689500808716, 3.71012878418, -3.71012878418, -20.689500808716, 40.115985870361, -3.71012878418, -6.950865268707, -22.856151580811, 34.102886199951, 18.197601318359, 18.197601318359, -22.856151580811, 34.102886199951, -6.950865268707, 14.722168922424, -26.33158493042, 30.62745475769, 14.722168922424, -14.722168922424, -14.722168922424, 26.33158493042, -30.62745475769, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 22.856151580811, -34.102886199951, 3.71012878418, 3.71012878418, 20.689500808716, -40.115985870361, -3.71012878418, -3.71012878418, 40.115985870361, -20.689500808716, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 34.102886199951, -22.856151580811, 14.722168922424, 14.722168922424, 30.62745475769, -26.33158493042, -14.722168922424, 26.33158493042, -30.62745475769, -14.722168922424, -18.197601318359, 22.856151580811, -34.102886199951, 6.950865268707, 6.950865268707, 22.856151580811, -34.102886199951, -18.197601318359, 3.71012878418, 20.689500808716, -40.115985870361, 3.71012878418, -3.71012878418, 40.115985870361, -20.689500808716, -3.71012878418, -6.950865268707, 34.102886199951, -22.856151580811, 18.197601318359, 18.197601318359, 34.102886199951, -22.856151580811, -6.950865268707, 14.722168922424, 30.62745475769, -26.33158493042, 14.722168922424, -14.722168922424, 26.33158493042, -14.722168922424, -30.62745475769, -18.197601318359, 22.856151580811, 6.950865268707, -34.102886199951, 6.950865268707, 22.856151580811, -18.197601318359, -34.102886199951, 3.71012878418, 20.689500808716, 3.71012878418, -40.115985870361, -3.71012878418, 40.115985870361, -3.71012878418, -20.689500808716, -6.950865268707, 34.102886199951, 18.197601318359, -22.856151580811, 18.197601318359, 34.102886199951, -6.950865268707, -22.856151580811, 14.722168922424, 30.62745475769, 14.722168922424, -26.33158493042, 26.33158493042, -14.722168922424, -30.62745475769, -14.722168922424, 22.856151580811, -18.197601318359, -34.102886199951, 6.950865268707, 22.856151580811, 6.950865268707, -34.102886199951, -18.197601318359, 20.689500808716, 3.71012878418, -40.115985870361, 3.71012878418, 40.115985870361, -3.71012878418, -20.689500808716, -3.71012878418, 34.102886199951, -6.950865268707, -22.856151580811, 18.197601318359, 34.102886199951, 18.197601318359, -22.856151580811, -6.950865268707, 30.62745475769, 14.722168922424, -26.33158493042, 14.722168922424, 26.33158493042, -14.722168922424, -14.722168922424, -30.62745475769, 22.856151580811, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -34.102886199951, 20.689500808716, 3.71012878418, 3.71012878418, -40.115985870361, 40.115985870361, -3.71012878418, -3.71012878418, -20.689500808716, 34.102886199951, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -22.856151580811, 30.62745475769, 14.722168922424, 14.722168922424, -26.33158493042, 1.53678560257, 1.53678560257, 1.53678560257, 45.362899780273, -2.035861253738, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 39.017890930176, -5.511293888092, 19.637172698975, 19.637172698975, 35.542457580566, 23.112604141235, -2.035861253738, -2.035861253738, 39.017890930176, 19.637172698975, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 19.637172698975, -5.511293888092, 35.542457580566, 17.253143310547, 17.253143310547, 17.253143310547, 34.232513427734, 1.53678560257, 1.53678560257, 45.362899780273, 1.53678560257, -2.035861253738, 2.035861253738, 39.017890930176, 23.112604141235, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 23.112604141235, -2.035861253738, 39.017890930176, -2.035861253738, 19.637172698975, -5.511293888092, 35.542457580566, 19.637172698975, 19.637172698975, 19.637172698975, 35.542457580566, -5.511293888092, 17.253143310547, 17.253143310547, 34.232513427734, 17.253143310547, 1.53678560257, 45.362899780273, 1.53678560257, 1.53678560257, -2.035861253738, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 39.017890930176, 23.112604141235, -2.035861253738, -5.511293888092, 35.542457580566, 19.637172698975, 19.637172698975, 23.112604141235, 39.017890930176, -2.035861253738, -2.035861253738, 19.637172698975, 35.542457580566, -5.511293888092, 19.637172698975, 19.637172698975, 35.542457580566, 19.637172698975, -5.511293888092, 17.253143310547, 34.232513427734, 17.253143310547, 17.253143310547, 45.362899780273, 1.53678560257, 1.53678560257, 1.53678560257, 39.017890930176, -2.035861253738, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 35.542457580566, -5.511293888092, 19.637172698975, 19.637172698975, 39.017890930176, 23.112604141235, -2.035861253738, -2.035861253738, 35.542457580566, 19.637172698975, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 19.637172698975, -5.511293888092, 34.232513427734, 17.253143310547, 17.253143310547, 17.253143310547, -30.62745475769, -14.722168922424, -14.722168922424, 26.33158493042, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 22.856151580811, -40.115985870361, 3.71012878418, 3.71012878418, 20.689500808716, -20.689500808716, -3.71012878418, -3.71012878418, 40.115985870361, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 34.102886199951, -26.33158493042, 14.722168922424, 14.722168922424, 30.62745475769, -30.62745475769, -14.722168922424, 26.33158493042, -14.722168922424, -34.102886199951, -18.197601318359, 22.856151580811, 6.950865268707, -34.102886199951, 6.950865268707, 22.856151580811, -18.197601318359, -40.115985870361, 3.71012878418, 20.689500808716, 3.71012878418, -20.689500808716, -3.71012878418, 40.115985870361, -3.71012878418, -22.856151580811, -6.950865268707, 34.102886199951, 18.197601318359, -22.856151580811, 18.197601318359, 34.102886199951, -6.950865268707, -26.33158493042, 14.722168922424, 30.62745475769, 14.722168922424, -30.62745475769, 26.33158493042, -14.722168922424, -14.722168922424, -34.102886199951, 22.856151580811, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -40.115985870361, 20.689500808716, 3.71012878418, 3.71012878418, -20.689500808716, 40.115985870361, -3.71012878418, -3.71012878418, -22.856151580811, 34.102886199951, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -26.33158493042, 30.62745475769, 14.722168922424, 14.722168922424, 26.33158493042, -30.62745475769, -14.722168922424, -14.722168922424, 22.856151580811, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 20.689500808716, -40.115985870361, 3.71012878418, 3.71012878418, 40.115985870361, -20.689500808716, -3.71012878418, -3.71012878418, 34.102886199951, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 30.62745475769, -26.33158493042, 14.722168922424, 14.722168922424, -34.232513427734, -17.253143310547, -17.253143310547, -17.253143310547, -35.542457580566, -19.637172698975, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, -19.637172698975, -39.017890930176, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -45.362899780273, -1.53678560257, -1.53678560257, -1.53678560257, -17.253143310547, -34.232513427734, -17.253143310547, -17.253143310547, -19.637172698975, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, -19.637172698975, -23.112604141235, -39.017890930176, 2.035861253738, 2.035861253738, 2.035861253738, -39.017890930176, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, -1.53678560257, -45.362899780273, -1.53678560257, -1.53678560257, -17.253143310547, -17.253143310547, -34.232513427734, -17.253143310547, -19.637172698975, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, -19.637172698975, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -39.017890930176, 2.035861253738, 2.035861253738, 2.035861253738, -39.017890930176, -23.112604141235, -1.53678560257, -1.53678560257, -45.362899780273, -1.53678560257, -17.253143310547, -17.253143310547, -17.253143310547, -34.232513427734, -19.637172698975, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, -19.637172698975, -35.542457580566, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -39.017890930176, -1.53678560257, -1.53678560257, -1.53678560257, -45.362899780273, -14.722168922424, -30.62745475769, -14.722168922424, 26.33158493042, -18.197601318359, -34.102886199951, 6.950865268707, 22.856151580811, 6.950865268707, -34.102886199951, -18.197601318359, 22.856151580811, 3.71012878418, -40.115985870361, 3.71012878418, 20.689500808716, -3.71012878418, -20.689500808716, -3.71012878418, 40.115985870361, -6.950865268707, -22.856151580811, 18.197601318359, 34.102886199951, 18.197601318359, -22.856151580811, -6.950865268707, 34.102886199951, 14.722168922424, -26.33158493042, 14.722168922424, 30.62745475769, -14.722168922424, -14.722168922424, -30.62745475769, 26.33158493042, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -34.102886199951, 22.856151580811, 3.71012878418, 3.71012878418, -40.115985870361, 20.689500808716, -3.71012878418, -3.71012878418, -20.689500808716, 40.115985870361, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -22.856151580811, 34.102886199951, 14.722168922424, 14.722168922424, -26.33158493042, 30.62745475769, -14.722168922424, -30.62745475769, 26.33158493042, -14.722168922424, -18.197601318359, -34.102886199951, 22.856151580811, 6.950865268707, 6.950865268707, -34.102886199951, 22.856151580811, -18.197601318359, 3.71012878418, -40.115985870361, 20.689500808716, 3.71012878418, -3.71012878418, -20.689500808716, 40.115985870361, -3.71012878418, -6.950865268707, -22.856151580811, 34.102886199951, 18.197601318359, 18.197601318359, -22.856151580811, 34.102886199951, -6.950865268707, 14.722168922424, -26.33158493042, 30.62745475769, 14.722168922424, -14.722168922424, -14.722168922424, 26.33158493042, -30.62745475769, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 22.856151580811, -34.102886199951, 3.71012878418, 3.71012878418, 20.689500808716, -40.115985870361, -3.71012878418, -3.71012878418, 40.115985870361, -20.689500808716, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 34.102886199951, -22.856151580811, 14.722168922424, 14.722168922424, 30.62745475769, -26.33158493042, -14.722168922424, 26.33158493042, -30.62745475769, -14.722168922424, -18.197601318359, 22.856151580811, -34.102886199951, 6.950865268707, 6.950865268707, 22.856151580811, -34.102886199951, -18.197601318359, 3.71012878418, 20.689500808716, -40.115985870361, 3.71012878418, -3.71012878418, 40.115985870361, -20.689500808716, -3.71012878418, -6.950865268707, 34.102886199951, -22.856151580811, 18.197601318359, 18.197601318359, 34.102886199951, -22.856151580811, -6.950865268707, 14.722168922424, 30.62745475769, -26.33158493042, 14.722168922424, -14.722168922424, 26.33158493042, -14.722168922424, -30.62745475769, -18.197601318359, 22.856151580811, 6.950865268707, -34.102886199951, 6.950865268707, 22.856151580811, -18.197601318359, -34.102886199951, 3.71012878418, 20.689500808716, 3.71012878418, -40.115985870361, -3.71012878418, 40.115985870361, -3.71012878418, -20.689500808716, -6.950865268707, 34.102886199951, 18.197601318359, -22.856151580811, 18.197601318359, 34.102886199951, -6.950865268707, -22.856151580811, 14.722168922424, 30.62745475769, 14.722168922424, -26.33158493042, 26.33158493042, -14.722168922424, -30.62745475769, -14.722168922424, 22.856151580811, -18.197601318359, -34.102886199951, 6.950865268707, 22.856151580811, 6.950865268707, -34.102886199951, -18.197601318359, 20.689500808716, 3.71012878418, -40.115985870361, 3.71012878418, 40.115985870361, -3.71012878418, -20.689500808716, -3.71012878418, 34.102886199951, -6.950865268707, -22.856151580811, 18.197601318359, 34.102886199951, 18.197601318359, -22.856151580811, -6.950865268707, 30.62745475769, 14.722168922424, -26.33158493042, 14.722168922424, 26.33158493042, -14.722168922424, -14.722168922424, -30.62745475769, 22.856151580811, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -34.102886199951, 20.689500808716, 3.71012878418, 3.71012878418, -40.115985870361, 40.115985870361, -3.71012878418, -3.71012878418, -20.689500808716, 34.102886199951, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -22.856151580811, 30.62745475769, 14.722168922424, 14.722168922424, -26.33158493042, 1.53678560257, 1.53678560257, 1.53678560257, 45.362899780273, -2.035861253738, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 39.017890930176, -5.511293888092, 19.637172698975, 19.637172698975, 35.542457580566, 23.112604141235, -2.035861253738, -2.035861253738, 39.017890930176, 19.637172698975, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 19.637172698975, -5.511293888092, 35.542457580566, 17.253143310547, 17.253143310547, 17.253143310547, 34.232513427734, 1.53678560257, 1.53678560257, 45.362899780273, 1.53678560257, -2.035861253738, 2.035861253738, 39.017890930176, 23.112604141235, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 23.112604141235, -2.035861253738, 39.017890930176, -2.035861253738, 19.637172698975, -5.511293888092, 35.542457580566, 19.637172698975, 19.637172698975, 19.637172698975, 35.542457580566, -5.511293888092, 17.253143310547, 17.253143310547, 34.232513427734, 17.253143310547, 1.53678560257, 45.362899780273, 1.53678560257, 1.53678560257, -2.035861253738, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 39.017890930176, 23.112604141235, -2.035861253738, -5.511293888092, 35.542457580566, 19.637172698975, 19.637172698975, 23.112604141235, 39.017890930176, -2.035861253738, -2.035861253738, 19.637172698975, 35.542457580566, -5.511293888092, 19.637172698975, 19.637172698975, 35.542457580566, 19.637172698975, -5.511293888092, 17.253143310547, 34.232513427734, 17.253143310547, 17.253143310547, 45.362899780273, 1.53678560257, 1.53678560257, 1.53678560257, 39.017890930176, -2.035861253738, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 35.542457580566, -5.511293888092, 19.637172698975, 19.637172698975, 39.017890930176, 23.112604141235, -2.035861253738, -2.035861253738, 35.542457580566, 19.637172698975, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 19.637172698975, -5.511293888092, 34.232513427734, 17.253143310547, 17.253143310547, 17.253143310547, -30.62745475769, -14.722168922424, -14.722168922424, 26.33158493042, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 22.856151580811, -40.115985870361, 3.71012878418, 3.71012878418, 20.689500808716, -20.689500808716, -3.71012878418, -3.71012878418, 40.115985870361, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 34.102886199951, -26.33158493042, 14.722168922424, 14.722168922424, 30.62745475769, -30.62745475769, -14.722168922424, 26.33158493042, -14.722168922424, -34.102886199951, -18.197601318359, 22.856151580811, 6.950865268707, -34.102886199951, 6.950865268707, 22.856151580811, -18.197601318359, -40.115985870361, 3.71012878418, 20.689500808716, 3.71012878418, -20.689500808716, -3.71012878418, 40.115985870361, -3.71012878418, -22.856151580811, -6.950865268707, 34.102886199951, 18.197601318359, -22.856151580811, 18.197601318359, 34.102886199951, -6.950865268707, -26.33158493042, 14.722168922424, 30.62745475769, 14.722168922424, -30.62745475769, 26.33158493042, -14.722168922424, -14.722168922424, -34.102886199951, 22.856151580811, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -40.115985870361, 20.689500808716, 3.71012878418, 3.71012878418, -20.689500808716, 40.115985870361, -3.71012878418, -3.71012878418, -22.856151580811, 34.102886199951, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -26.33158493042, 30.62745475769, 14.722168922424, 14.722168922424, 26.33158493042, -30.62745475769, -14.722168922424, -14.722168922424, 22.856151580811, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 20.689500808716, -40.115985870361, 3.71012878418, 3.71012878418, 40.115985870361, -20.689500808716, -3.71012878418, -3.71012878418, 34.102886199951, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 30.62745475769, -26.33158493042, 14.722168922424, 14.722168922424, -34.232513427734, -17.253143310547, -17.253143310547, -17.253143310547, -35.542457580566, -19.637172698975, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, -19.637172698975, -39.017890930176, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -45.362899780273, -1.53678560257, -1.53678560257, -1.53678560257, -17.253143310547, -34.232513427734, -17.253143310547, -17.253143310547, -19.637172698975, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, -19.637172698975, -23.112604141235, -39.017890930176, 2.035861253738, 2.035861253738, 2.035861253738, -39.017890930176, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, -1.53678560257, -45.362899780273, -1.53678560257, -1.53678560257, -17.253143310547, -17.253143310547, -34.232513427734, -17.253143310547, -19.637172698975, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, -19.637172698975, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -39.017890930176, 2.035861253738, 2.035861253738, 2.035861253738, -39.017890930176, -23.112604141235, -1.53678560257, -1.53678560257, -45.362899780273, -1.53678560257, -17.253143310547, -17.253143310547, -17.253143310547, -34.232513427734, -19.637172698975, -19.637172698975, 5.511293888092, -35.542457580566, -19.637172698975, 5.511293888092, -19.637172698975, -35.542457580566, 5.511293888092, -19.637172698975, -19.637172698975, -35.542457580566, -23.112604141235, 2.035861253738, 2.035861253738, -39.017890930176, 2.035861253738, -23.112604141235, 2.035861253738, -39.017890930176, 2.035861253738, 2.035861253738, -23.112604141235, -39.017890930176, -1.53678560257, -1.53678560257, -1.53678560257, -45.362899780273, -14.722168922424, -30.62745475769, -14.722168922424, 26.33158493042, -18.197601318359, -34.102886199951, 6.950865268707, 22.856151580811, 6.950865268707, -34.102886199951, -18.197601318359, 22.856151580811, 3.71012878418, -40.115985870361, 3.71012878418, 20.689500808716, -3.71012878418, -20.689500808716, -3.71012878418, 40.115985870361, -6.950865268707, -22.856151580811, 18.197601318359, 34.102886199951, 18.197601318359, -22.856151580811, -6.950865268707, 34.102886199951, 14.722168922424, -26.33158493042, 14.722168922424, 30.62745475769, -14.722168922424, -14.722168922424, -30.62745475769, 26.33158493042, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -34.102886199951, 22.856151580811, 3.71012878418, 3.71012878418, -40.115985870361, 20.689500808716, -3.71012878418, -3.71012878418, -20.689500808716, 40.115985870361, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -22.856151580811, 34.102886199951, 14.722168922424, 14.722168922424, -26.33158493042, 30.62745475769, -14.722168922424, -30.62745475769, 26.33158493042, -14.722168922424, -18.197601318359, -34.102886199951, 22.856151580811, 6.950865268707, 6.950865268707, -34.102886199951, 22.856151580811, -18.197601318359, 3.71012878418, -40.115985870361, 20.689500808716, 3.71012878418, -3.71012878418, -20.689500808716, 40.115985870361, -3.71012878418, -6.950865268707, -22.856151580811, 34.102886199951, 18.197601318359, 18.197601318359, -22.856151580811, 34.102886199951, -6.950865268707, 14.722168922424, -26.33158493042, 30.62745475769, 14.722168922424, -14.722168922424, -14.722168922424, 26.33158493042, -30.62745475769, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 22.856151580811, -34.102886199951, 3.71012878418, 3.71012878418, 20.689500808716, -40.115985870361, -3.71012878418, -3.71012878418, 40.115985870361, -20.689500808716, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 34.102886199951, -22.856151580811, 14.722168922424, 14.722168922424, 30.62745475769, -26.33158493042, -14.722168922424, 26.33158493042, -30.62745475769, -14.722168922424, -18.197601318359, 22.856151580811, -34.102886199951, 6.950865268707, 6.950865268707, 22.856151580811, -34.102886199951, -18.197601318359, 3.71012878418, 20.689500808716, -40.115985870361, 3.71012878418, -3.71012878418, 40.115985870361, -20.689500808716, -3.71012878418, -6.950865268707, 34.102886199951, -22.856151580811, 18.197601318359, 18.197601318359, 34.102886199951, -22.856151580811, -6.950865268707, 14.722168922424, 30.62745475769, -26.33158493042, 14.722168922424, -14.722168922424, 26.33158493042, -14.722168922424, -30.62745475769, -18.197601318359, 22.856151580811, 6.950865268707, -34.102886199951, 6.950865268707, 22.856151580811, -18.197601318359, -34.102886199951, 3.71012878418, 20.689500808716, 3.71012878418, -40.115985870361, -3.71012878418, 40.115985870361, -3.71012878418, -20.689500808716, -6.950865268707, 34.102886199951, 18.197601318359, -22.856151580811, 18.197601318359, 34.102886199951, -6.950865268707, -22.856151580811, 14.722168922424, 30.62745475769, 14.722168922424, -26.33158493042, 26.33158493042, -14.722168922424, -30.62745475769, -14.722168922424, 22.856151580811, -18.197601318359, -34.102886199951, 6.950865268707, 22.856151580811, 6.950865268707, -34.102886199951, -18.197601318359, 20.689500808716, 3.71012878418, -40.115985870361, 3.71012878418, 40.115985870361, -3.71012878418, -20.689500808716, -3.71012878418, 34.102886199951, -6.950865268707, -22.856151580811, 18.197601318359, 34.102886199951, 18.197601318359, -22.856151580811, -6.950865268707, 30.62745475769, 14.722168922424, -26.33158493042, 14.722168922424, 26.33158493042, -14.722168922424, -14.722168922424, -30.62745475769, 22.856151580811, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -34.102886199951, 20.689500808716, 3.71012878418, 3.71012878418, -40.115985870361, 40.115985870361, -3.71012878418, -3.71012878418, -20.689500808716, 34.102886199951, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -22.856151580811, 30.62745475769, 14.722168922424, 14.722168922424, -26.33158493042, 1.53678560257, 1.53678560257, 1.53678560257, 45.362899780273, -2.035861253738, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 39.017890930176, -5.511293888092, 19.637172698975, 19.637172698975, 35.542457580566, 23.112604141235, -2.035861253738, -2.035861253738, 39.017890930176, 19.637172698975, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 19.637172698975, -5.511293888092, 35.542457580566, 17.253143310547, 17.253143310547, 17.253143310547, 34.232513427734, 1.53678560257, 1.53678560257, 45.362899780273, 1.53678560257, -2.035861253738, 2.035861253738, 39.017890930176, 23.112604141235, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 23.112604141235, -2.035861253738, 39.017890930176, -2.035861253738, 19.637172698975, -5.511293888092, 35.542457580566, 19.637172698975, 19.637172698975, 19.637172698975, 35.542457580566, -5.511293888092, 17.253143310547, 17.253143310547, 34.232513427734, 17.253143310547, 1.53678560257, 45.362899780273, 1.53678560257, 1.53678560257, -2.035861253738, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 39.017890930176, 23.112604141235, -2.035861253738, -5.511293888092, 35.542457580566, 19.637172698975, 19.637172698975, 23.112604141235, 39.017890930176, -2.035861253738, -2.035861253738, 19.637172698975, 35.542457580566, -5.511293888092, 19.637172698975, 19.637172698975, 35.542457580566, 19.637172698975, -5.511293888092, 17.253143310547, 34.232513427734, 17.253143310547, 17.253143310547, 45.362899780273, 1.53678560257, 1.53678560257, 1.53678560257, 39.017890930176, -2.035861253738, -2.035861253738, 23.112604141235, 39.017890930176, -2.035861253738, 23.112604141235, -2.035861253738, 35.542457580566, -5.511293888092, 19.637172698975, 19.637172698975, 39.017890930176, 23.112604141235, -2.035861253738, -2.035861253738, 35.542457580566, 19.637172698975, -5.511293888092, 19.637172698975, 35.542457580566, 19.637172698975, 19.637172698975, -5.511293888092, 34.232513427734, 17.253143310547, 17.253143310547, 17.253143310547, -30.62745475769, -14.722168922424, -14.722168922424, 26.33158493042, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 22.856151580811, -40.115985870361, 3.71012878418, 3.71012878418, 20.689500808716, -20.689500808716, -3.71012878418, -3.71012878418, 40.115985870361, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 34.102886199951, -26.33158493042, 14.722168922424, 14.722168922424, 30.62745475769, -30.62745475769, -14.722168922424, 26.33158493042, -14.722168922424, -34.102886199951, -18.197601318359, 22.856151580811, 6.950865268707, -34.102886199951, 6.950865268707, 22.856151580811, -18.197601318359, -40.115985870361, 3.71012878418, 20.689500808716, 3.71012878418, -20.689500808716, -3.71012878418, 40.115985870361, -3.71012878418, -22.856151580811, -6.950865268707, 34.102886199951, 18.197601318359, -22.856151580811, 18.197601318359, 34.102886199951, -6.950865268707, -26.33158493042, 14.722168922424, 30.62745475769, 14.722168922424, -30.62745475769, 26.33158493042, -14.722168922424, -14.722168922424, -34.102886199951, 22.856151580811, -18.197601318359, 6.950865268707, -34.102886199951, 22.856151580811, 6.950865268707, -18.197601318359, -40.115985870361, 20.689500808716, 3.71012878418, 3.71012878418, -20.689500808716, 40.115985870361, -3.71012878418, -3.71012878418, -22.856151580811, 34.102886199951, -6.950865268707, 18.197601318359, -22.856151580811, 34.102886199951, 18.197601318359, -6.950865268707, -26.33158493042, 30.62745475769, 14.722168922424, 14.722168922424, 26.33158493042, -30.62745475769, -14.722168922424, -14.722168922424, 22.856151580811, -34.102886199951, -18.197601318359, 6.950865268707, 22.856151580811, -34.102886199951, 6.950865268707, -18.197601318359, 20.689500808716, -40.115985870361, 3.71012878418, 3.71012878418, 40.115985870361, -20.689500808716, -3.71012878418, -3.71012878418, 34.102886199951, -22.856151580811, -6.950865268707, 18.197601318359, 34.102886199951, -22.856151580811, 18.197601318359, -6.950865268707, 30.62745475769, -26.33158493042, 14.722168922424, 14.722168922424 };

constant static float const NORMALIZER_4D = 0.0220065933241897;

constant static float const SKEW_4D = -0.138196601125011f;
constant static float const UNSKEW_4D = 0.309016994374947f;
constant static float const LATTICE_STEP_4D = 0.2f;
constant static float const RSQUARED_4D = 0.6f;
constant static long const SEED_OFFSET_4D = 0xE83DC3E0DA7164DL;

float grad(long seed, long xsvp, long ysvp, long zsvp, long wsvp, float dx, float dy, float dz, float dw) {
    long hash = seed ^ (xsvp ^ ysvp) ^ (zsvp ^ wsvp);
    hash *= HASH_MULTIPLIER;
    hash ^= hash >> (64 - N_GRADS_4D_EXPONENT + 2);
    int gi = (int)hash & ((N_GRADS_4D - 1) << 2);
    return (GRADIENTS_4D[gi | 0] * dx + GRADIENTS_4D[gi | 1] * dy) + (GRADIENTS_4D[gi | 2] * dz + GRADIENTS_4D[gi | 3] * dw);
}

float noise4_UnskewedBase(long seed, float xs, float ys, float zs, float ws) {

    // Get base points and offsets
    int xsb = fastFloor(xs), ysb = fastFloor(ys), zsb = fastFloor(zs), wsb = fastFloor(ws);
    float xsi = (float)(xs - xsb), ysi = (float)(ys - ysb), zsi = (float)(zs - zsb), wsi = (float)(ws - wsb);

    // Determine which lattice we can be confident has a contributing point its corresponding cell's base simplex.
    // We only look at the spaces between the diagonal planes. This proved effective in all of my tests.
    float siSum = (xsi + ysi) + (zsi + wsi);
    int startingLattice = (int)(siSum * 1.25);

    // Offset for seed based on first lattice copy.
    seed += startingLattice * SEED_OFFSET_4D;

    // Offset for lattice point relative positions (skewed)
    float startingLatticeOffset = startingLattice * -LATTICE_STEP_4D;
    xsi += startingLatticeOffset; ysi += startingLatticeOffset; zsi += startingLatticeOffset; wsi += startingLatticeOffset;

    // Prep for vertex contributions.
    float ssi = (siSum + startingLatticeOffset * 4) * UNSKEW_4D;

    // Prime pre-multiplication for hash.
    long xsvp = xsb * PRIME_X, ysvp = ysb * PRIME_Y, zsvp = zsb * PRIME_Z, wsvp = wsb * PRIME_W;

    // Five points to add, total, from five copies of the A4 lattice.
    float value = 0;
    for (int i = 0; ; i++) {

        // Next point is the closest vertex on the 4-simplex whose base vertex is the aforementioned vertex.
        float score0 = 1.0 + ssi * (-1.0 / UNSKEW_4D); // Seems slightly faster than 1.0-xsi-ysi-zsi-wsi
        if (xsi >= ysi && xsi >= zsi && xsi >= wsi && xsi >= score0) {
            xsvp += PRIME_X;
            xsi -= 1;
            ssi -= UNSKEW_4D;
        }
        else if (ysi > xsi && ysi >= zsi && ysi >= wsi && ysi >= score0) {
            ysvp += PRIME_Y;
            ysi -= 1;
            ssi -= UNSKEW_4D;
        }
        else if (zsi > xsi && zsi > ysi && zsi >= wsi && zsi >= score0) {
            zsvp += PRIME_Z;
            zsi -= 1;
            ssi -= UNSKEW_4D;
        }
        else if (wsi > xsi && wsi > ysi && wsi > zsi && wsi >= score0) {
            wsvp += PRIME_W;
            wsi -= 1;
            ssi -= UNSKEW_4D;
        }

        // gradient contribution with falloff.
        float dx = xsi + ssi, dy = ysi + ssi, dz = zsi + ssi, dw = wsi + ssi;
        float a = (dx * dx + dy * dy) + (dz * dz + dw * dw);
        if (a < RSQUARED_4D) {
            a -= RSQUARED_4D;
            a *= a;
            value += a * a * grad(seed, xsvp, ysvp, zsvp, wsvp, dx, dy, dz, dw);
        }

        // Break from loop if we're done, skipping updates below.
        if (i == 4) break;

        // Update for next lattice copy shifted down by <-0.2, -0.2, -0.2, -0.2>.
        xsi += LATTICE_STEP_4D; ysi += LATTICE_STEP_4D; zsi += LATTICE_STEP_4D; wsi += LATTICE_STEP_4D;
        ssi += LATTICE_STEP_4D * 4 * UNSKEW_4D;
        seed -= SEED_OFFSET_4D;

        // Because we don't always start on the same lattice copy, there's a special reset case.
        if (i == startingLattice) {
            xsvp -= PRIME_X;
            ysvp -= PRIME_Y;
            zsvp -= PRIME_Z;
            wsvp -= PRIME_W;
            seed += SEED_OFFSET_4D * 5;
        }
    }

    return value;
}

float noise4_ImproveXYZ_ImproveXY(long seed, float x, float y, float z, float w) {
    float xy = x + y;
    float s2 = xy * -0.21132486540518699998;
    float zz = z * 0.28867513459481294226;
    float ww = w * 0.2236067977499788;
    float xr = x + (zz + ww + s2), yr = y + (zz + ww + s2);
    float zr = xy * -0.57735026918962599998 + (zz + ww);
    float wr = z * -0.866025403784439 + ww;

    return noise4_UnskewedBase(seed, xr, yr, zr, wr);
}

float noise4_ImproveXYZ_ImproveXZ(long seed, float x, float y, float z, float w) {
    float xz = x + z;
    float s2 = xz * -0.21132486540518699998;
    float yy = y * 0.28867513459481294226;
    float ww = w * 0.2236067977499788;
    float xr = x + (yy + ww + s2), zr = z + (yy + ww + s2);
    float yr = xz * -0.57735026918962599998 + (yy + ww);
    float wr = y * -0.866025403784439 + ww;

    return noise4_UnskewedBase(seed, xr, yr, zr, wr);
}

float noise4_ImproveXYZ(long seed, float x, float y, float z, float w) {

    float xyz = x + y + z;
    float ww = w * 0.2236067977499788;
    float s2 = xyz * -0.16666666666666666 + ww;
    float xs = x + s2, ys = y + s2, zs = z + s2, ws = -0.5 * xyz + ww;

    return noise4_UnskewedBase(seed, xs, ys, zs, ws);
}

float noise4_ImproveXY_ImproveZW(long seed, float x, float y, float z, float w) {

    float s2 = (x + y) * -0.178275657951399372 + (z + w) * 0.215623393288842828;
    float t2 = (z + w) * -0.403949762580207112 + (x + y) * -0.375199083010075342;
    float xs = x + s2, ys = y + s2, zs = z + t2, ws = w + t2;

    return noise4_UnskewedBase(seed, xs, ys, zs, ws);
}

/**
 * 4D OpenSimplex2 noise, fallback lattice orientation.
 */
float noise4_Fallback(long seed, float x, float y, float z, float w) {

    // Get points for A4 lattice
    float s = SKEW_4D * (x + y + z + w);
    float xs = x + s, ys = y + s, zs = z + s, ws = w + s;

    return noise4_UnskewedBase(seed, xs, ys, zs, ws);
}

kernel void openSimplexNoise4(
                              constant OpenSimplex2MetalParameters &uniforms [[ buffer(0) ]],
                              constant const float4 * in                     [[ buffer(1) ]],
                              device float * out                             [[ buffer(2) ]],
                              uint2 thread_position_in_grid                  [[ thread_position_in_grid ]]
                              ) {
                                  int index = thread_position_in_grid.x;

                                  switch (uniforms.noise4Variant) {
                                      case OpenSimplex2MetalNoise4Variant::xyz:
                                          out[index] = noise4_ImproveXYZ(uniforms.seed, in[index].x, in[index].y, in[index].z, in[index].w);
                                          break;
                                      case OpenSimplex2MetalNoise4Variant::xyz_xy:
                                          out[index] = noise4_ImproveXYZ_ImproveXY(uniforms.seed, in[index].x, in[index].y, in[index].z, in[index].w);
                                          break;
                                      case OpenSimplex2MetalNoise4Variant::xyz_xz:
                                          out[index] = noise4_ImproveXYZ_ImproveXZ(uniforms.seed, in[index].x, in[index].y, in[index].z, in[index].w);
                                          break;
                                      case OpenSimplex2MetalNoise4Variant::xy_zw:
                                          out[index] = noise4_ImproveXY_ImproveZW(uniforms.seed, in[index].x, in[index].y, in[index].z, in[index].w);
                                          break;
                                      case OpenSimplex2MetalNoise4Variant::fallback:
                                          out[index] = noise4_Fallback(uniforms.seed, in[index].x, in[index].y, in[index].z, in[index].w);
                                          break;
                                  }
                              }


enum class FractalNoiseMetalType: int8_t {
    openSimplex2 = 0,
};

union FractalNoiseMetalTypeParameters {
    OpenSimplex2MetalParameters openSimplex2Parameters;
};

struct FractalNoiseMetalParameters {
    float lacunarity;
    float gain;

    float startingAmplitude;
    float startingFrequency;

    int octaves;

    FractalNoiseMetalType noiseType;
    FractalNoiseMetalTypeParameters noiseTypeParameters;
};
kernel void fractalNoise2(
                          constant FractalNoiseMetalParameters &uniforms [[ buffer(0) ]],
                          constant const float2 * in                     [[ buffer(1) ]],
                          device float * out                             [[ buffer(2) ]],
                          uint2 thread_position_in_grid                  [[ thread_position_in_grid ]]
                          ) {
                              int index = thread_position_in_grid.x;
                          }

kernel void fractalNoise3(
                          constant FractalNoiseMetalParameters &uniforms [[ buffer(0) ]],
                          constant const float3 * in                     [[ buffer(1) ]],
                          device float * out                             [[ buffer(2) ]],
                          uint2 thread_position_in_grid                  [[ thread_position_in_grid ]]
                          ) {
                              int index = thread_position_in_grid.x;

                              float fractalNoise = 0;

                              float amplitude = uniforms.startingAmplitude;
                              float frequency = uniforms.startingFrequency;

                              float gain = uniforms.gain;

                              for (int i = 0; i < uniforms.octaves; ++i) {
                                  fractalNoise += amplitude * noise3_ImproveXY(
                                                                               uniforms.noiseTypeParameters.openSimplex2Parameters.seed,
                                                                               in[index].x * frequency,
                                                                               in[index].y * frequency,
                                                                               in[index].z * frequency);

                                  frequency *= uniforms.lacunarity;
                                  amplitude *= gain;
                              }

                              out[index] = fractalNoise;
                          }

kernel void fractalNoise4(
                          constant FractalNoiseMetalParameters &uniforms [[ buffer(0) ]],
                          constant const float4 * in                     [[ buffer(1) ]],
                          device float * out                             [[ buffer(2) ]],
                          uint2 thread_position_in_grid                  [[ thread_position_in_grid ]]
                          ) {
                              int index = thread_position_in_grid.x;
                              }
